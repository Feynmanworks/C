------------ Exercise 1
Input	Result
6
-4
12
-1
0
enter a list of integers until you enter 0
the number of entries is 4
the average is 3.25
the lowest value is -4
the largest value is 12

#include<stdio.h>
#include<limits.h>

int main()
{
int n;
int count=0, sum=0;
int min=INT_MAX; 
int max=INT_MIN;

printf("enter a list of integers until you enter 0\n");
while(scanf("%d", &n)!= EOF && n!=0)
{
count++;
if(n>max){
  max = n;
}
if(n<min){
  min = n;
}
sum += n;
}

if(count>0){
 printf("the number of entries is %d\n",count);
 printf("the average is %.2f\n", (float)sum/count);
 printf("the lowest value is %d\n", min);
 printf("the largest value is %d\n", max);
}
return 0;
}


------------ Exercise 2
#include<stdio.h>

int main(){
    for(int i=97; i<= 122; i++){
        printf("%c %d\n", i, i);
    }
    
    for(int i=65; i<= 90; i++){
        printf("%c %d\n", i, i);
    }
    return 0;
}

------------ Exercise 3
#include<stdio.h>
int main(){
    int count;
    int n;
    int pos=0;
    int neg=0;
    int null=0;
    printf("how many integers will you enter\n");
    scanf("%d", &count);
    
    for(int i = 0; i < count; i++){
        scanf("%d", &n);
        printf("enter the number %d\n", i);
    
        if(n > 0)
            pos++;
        else if(n < 0)
            neg++;
        else 
            null++;
    }
    printf("the number of positive integers is %d\n", pos);
    printf("the number of negative integers is %d\n", neg);
    printf("the number of zeros is %d\n", null);
    return 0;
}

------------ Exercise 4
Write a program that reads an integer from the user and prints out each digit of the number on its own line.
#include<stdio.h>
int main(){
    int n;
    int tem;
    scanf("%d",&n);
    
    printf("enter an integer ");
    while (n){
        tem = n % 10;
        n /= 10;
        printf("%d\n", tem);
    }
    return 0;
}

------------ Exercise 5
#include<stdio.h>
#include<string.h>

int main(){
    char ch;
    int count = 0;
    while((ch = getchar()) != '\n'){                                    // getchar(), getch() 是#include<string.h>头文件中的标准函数
        count ++;                                                       // getchar() 用'\n'判断，因为函数用于缓冲输入，因为只有用户按下回车才会读入，读字符
    }                                                                   // gerch() 用'\0'判断，因为函数用于非缓冲出入，因为函数直接读入用户输入。读字符
    printf("enter a string of characters : string length = %d", count);
    return 0;
}
------------ Exercise 6
#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int main(){
srand(time(NULL));
char reponse;
int fin=0;
int guess;
int trouve;
int essais;
do{
    int nb = random() % 1000;
    essais = 0;
    trouve = 0;
    do{
      printf("entrez votre nombre / enter your guess : ");
      scanf("%d", &guess);
      if(guess == nb){
          printf("trouve // found\n");
          trouve = 1;
      }
      else{
            if(nb > guess){
                  printf("c'est plus grand / It's greater\n");
            }
            else{
                  printf("c'est plus petit / it's less\n");
            }
            essais++;
      }
      }while((essais < 10) && (trouve == 0));
      if(essais <10)
          printf("Success in %d trials\n", essais);
      else
          printf("failed: the number was %d\n", nb);
      printf("do you want to play again?");
      //getchar();
      response = getchar();
      if(response != 'O')
          fin = 1;
}while(!fin);
return 0;
}

------------ Exercise 5
#include<stdio.h>
int CompareChine(char chi[], char ch2[]){
    int i = 0;
    while (ch1[i] != '\0' && ch2[i] != '\0'){
          if (ch1[i] < ch2[2])
                return -1;
          else 
                return 1;
          i++;
    }
    if (ch1[i] == '\0' && ch2[2] != '\0')
        return -1;
    else if (ch1[i] != '\0' && ch2[i] == '\0')
        return 1;

    return 0;
}

int main(){
    char str[] = "apple";
    char str[] = "banana";

int result = CompareChaines(str1, str2);
}

------------ Exercise 6------------- 简单单的字母加密
#include<stdio.h>
void caesar(char ch[], int d){
    int i = 0;
    while (ch[i] != '\0'){
        if ((ch[i] >= 'a' && ch[i] <= 'z') || (ch[i] >= 'A' && ch[i] <= 'Z')){
            char base = (ch[i] >= 'a' && ch[i] <= 'z')? 'a' : 'A';
            ch[i] = base + (ch[i] + offset) % 26;
        }
    i++;
    }
}

int main(){
    char chaine[] = "XYZ_phone";
    int offset = 2;
    printf("Original: %s\n", chaine);
    caesar(chaine, offset);
    printf("Encrypted: %s\n", chaine);
return 0;
}

------------ Exercise 6------------- function-array
#include<stdio.h>
#include<string.h>

int anagram(char* str1, char*str2){
  if(strlen(str1) != strlen(str2)){    //compare the length of str1 and str2 
      return 0;                        //size_t strlen(const char* str);     headfile=#include<string.h>       beginning of the string and the terminating null character='\0'(\0 is not counted)
  }
  int alphabet[26][2] = {0};
  int i;

  for(i=0; i<strlen(str1); i++){
      alphabet[str1[i] - 'A'][0]++;   //数组自增带有变量的维度
      alphabet[str2[i] - 'A'][1]++;
  }
  for(i=0; i<26, i++){
      if(alphabet[i][0] != alphabet[i][1]){
          return 0;
      }
  }
  return 1;
}

int main()
{
	printf("%s %s %d\n", "TSARINE", "ENTRAIS", anagram("TSARINE", "ENTRAIS"));
  return 0;
}

------------ Exercise 6------------- 判断两个语句一致
int compareString(char ch1[], char ch2[]){
	while(1){
	if (ch1[i] == '\0' && ch2[i] == '\0');  // 直至string结束符，两个string字符一致
	}
}

------------ Exercise 6------------- ASCII值
while(ch[i] > 0){
     //在判断字符创ch[]的过程中，避免遇到space中途退出循环，ASCII（space） = 32
}
